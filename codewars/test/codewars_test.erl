-module(codewars_test).
-include_lib("eunit/include/eunit.hrl").

codewars_test_() ->
  {"Basic tests", [{"row_sum_odd_numbers(1)", ?_assertEqual(1, codewars:row_sum_odd_numbers(1))},
                   {"row_sum_odd_numbers(2)", ?_assertEqual(8, codewars:row_sum_odd_numbers(2))},
                   {"row_sum_odd_numbers(13)", ?_assertEqual(2197, codewars:row_sum_odd_numbers(13))},
                   {"row_sum_odd_numbers(19)", ?_assertEqual(6859, codewars:row_sum_odd_numbers(19))},
                   {"row_sum_odd_numbers(41)", ?_assertEqual(68921, codewars:row_sum_odd_numbers(41))},
                   {"row_sum_odd_numbers(42)", ?_assertEqual(74088, codewars:row_sum_odd_numbers(42))},
                   {"row_sum_odd_numbers(74)", ?_assertEqual(405224, codewars:row_sum_odd_numbers(74))},
                   {"row_sum_odd_numbers(86)", ?_assertEqual(636056, codewars:row_sum_odd_numbers(86))},
                   {"row_sum_odd_numbers(93)", ?_assertEqual(804357, codewars:row_sum_odd_numbers(93))},
                   {"row_sum_odd_numbers(101)", ?_assertEqual(1030301, codewars:row_sum_odd_numbers(101))},
                   {"Testing for 1, 4", ?_assert   (codewars:lovefunc(1, 4))},
                   {"Testing for 2, 2", ?_assertNot(codewars:lovefunc(2, 2))},
                   {"Testing for 0, 1", ?_assert   (codewars:lovefunc(0, 1))},
                   {"Testing for 0, 0", ?_assertNot(codewars:lovefunc(0, 0))},
                   {"Summation: Testing for 1", ?_assertEqual(1, codewars:summation(1))},
                   {"Summation: Testing for 8", ?_assertEqual(36, codewars:summation(8))},
                   {"Summation: Testing for 22", ?_assertEqual(253, codewars:summation(22))},
                   {"Summation: Testing for 100", ?_assertEqual(5050, codewars:summation(100))},
                   {"Summation: Testing for 213", ?_assertEqual(22791, codewars:summation(213))},
                   {"Pairs: returns 1 for [1,2]", ?_assertEqual(1, codewars:pairs([1, 2]))},
                   {"Pairs: returns 2 for [1,2,3,4]", ?_assertEqual(2, codewars:pairs([1, 2, 3, 4]))},
                   {"Pairs: returns 2 for [1,2,3,4,5]", ?_assertEqual(2, codewars:pairs([1, 2, 3, 4, 5]))},
                   {"Pairs: returns 2 for [5,4,3,2,1]", ?_assertEqual(2, codewars:pairs([5, 4, 3, 2, 1]))},
                   {"Pairs: returns 2 for [-1,-2,-3,-4,-5]", ?_assertEqual(2, codewars:pairs([-1, -2, -3, -4, -5]))},
                   {"Strong: strong(1)", ?_assertEqual("STRONG!!!!", codewars:strong(1))},
                   {"Strong: strong(2)", ?_assertEqual("STRONG!!!!", codewars:strong(2))},
                   {"Strong: strong(145)", ?_assertEqual("STRONG!!!!", codewars:strong(145))},
                   {"Strong: strong(40585)", ?_assertEqual("STRONG!!!!", codewars:strong(40585))},
                   {"Strong: strong(7)", ?_assertEqual("Not Strong !!", codewars:strong(7))},
                   {"Strong: strong(93)", ?_assertEqual("Not Strong !!", codewars:strong(93))},
                   {"Strong: strong(185)", ?_assertEqual("Not Strong !!", codewars:strong(185))},
                   {"Century: Testing for 1705", ?_assertEqual(18, codewars:century(1705))},
                   {"Century: Testing for 1900", ?_assertEqual(19, codewars:century(1900))},
                   {"Century: Testing for 1601", ?_assertEqual(17, codewars:century(1601))},
                   {"Century: Testing for 2000", ?_assertEqual(20, codewars:century(2000))},
                   {"Century: Testing for 89", ?_assertEqual(1, codewars:century(89))},
                   {"Century: Testing for 481131", ?_assertEqual(4812, codewars:century(481131))},
                   {"Century: Testing for 615004", ?_assertEqual(6151, codewars:century(615004))},
                   {"Max Product: max_product([4, 3, 5], 2)", ?_assertEqual(20, codewars:max_product([3,4,5], 2))}, 
                   {"Max Product: max_product([10, 8, 7, 9], 3)", ?_assertEqual(720, codewars:max_product([10, 8, 7, 9], 3))}, 
                   {"Max Product: max_product([8, 6, 4, 6], 3)", ?_assertEqual(288, codewars:max_product([8, 6, 4, 6], 3))}, 
                   {"Max Product: max_product([10, 2, 3, 8, 1, 10, 4], 5)", ?_assertEqual(9600, codewars:max_product([10, 2, 3, 8, 1, 10, 4], 5))}, 
                   {"Max Product: max_product([13, 12, -27, -302, 25, 37, 133, 155, -14], 5)", ?_assertEqual(247895375, codewars:max_product([13, 12, -27, -302, 25, 37, 133, 155, -14], 5))}, 
                   {"Max Product: max_product([-4, -27, -15, -6, -1], 2)", ?_assertEqual(4, codewars:max_product([-4, -27, -15, -6, -1], 2))}, 
                   {"Max Product: max_product([-17, -8, -102, -309], 2)", ?_assertEqual(136, codewars:max_product([-17, -8, -102, -309], 2))}, 
                   {"Max Product: max_product([10, 3, -27, -1], 3)", ?_assertEqual(-30, codewars:max_product([10, 3, -27, -1], 3))}, 
                   {"Max Product: max_product([14, 29, -28, 39, -16, -48], 4)", ?_assertEqual(-253344, codewars:max_product([14, 29, -28, 39, -16, -48], 4))}, 
                   {"Max Product: max_product([1], 1)", ?_assertEqual(1, codewars:max_product([1], 1))},
                   {"past(0, 1, 1)", ?_assertEqual(61000, codewars:past(0, 1, 1))},
                   {"past(1, 1, 1)", ?_assertEqual(3661000, codewars:past(1, 1, 1))},
                   {"past(0, 0, 0)", ?_assertEqual(0, codewars:past(0, 0, 0))},
                   {"past(1, 0, 1)", ?_assertEqual(3601000, codewars:past(1, 0, 1))},
                   {"past(1, 0, 0)", ?_assertEqual(3600000, codewars:past(1, 0, 0))}]}.